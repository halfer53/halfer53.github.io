{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[],"Cache":[{"_id":"source/404/index.md","hash":"73b7ed2fdaf152590d782de318b211e3163c0b73","modified":1538006632352},{"_id":"source/_posts/Leetcode-Q1.md","hash":"2faf460c8ffcf522a591c12aed74ed7fa6a15b0e","modified":1538006632352},{"_id":"source/_posts/Leetcode-Q10.md","hash":"f0f254a40cf2aecc932cda45bb0f4e6b82b5da47","modified":1538006632352},{"_id":"source/_posts/Leetcode-Q3.md","hash":"45bc3122deb637c096cf368eea3ee6912e3079db","modified":1538006632352},{"_id":"source/_posts/Leetcode-Q32.md","hash":"8776a7662fc7cffa1be35f19707976418165c614","modified":1538006632352},{"_id":"source/_posts/Leetcode-Q5.md","hash":"83178f9432b84e648d5af413958e3d9666d3a8cd","modified":1538006632352},{"_id":"source/_posts/Leetcode-Q7.md","hash":"a6e9b51c8b88b0d5f86bd3fe05904ed8f2b4d7d8","modified":1538006632352},{"_id":"source/_posts/Leetcode-Q8.md","hash":"6e99d2ecfd806dbcf190fc6eb62cb9c201a42059","modified":1538006632352},{"_id":"source/_posts/Leetcode-Q9.md","hash":"458a9502fbf972cc84479f2bbadcdec2cad46653","modified":1538006632352},{"_id":"source/_posts/leetcode-Q2.md","hash":"babd2852fc46360a8674ff8b2e3ffed199084020","modified":1538006632352},{"_id":"source/about/index.md","hash":"a04c573313f599df553cb26369aeafba640ba216","modified":1538006632352},{"_id":"public/atom.xml","hash":"33f180bb6ffa0a7e295f8e7f50186e41906be3ff","modified":1538007951041},{"_id":"public/404/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538007951043},{"_id":"public/about/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538007951044},{"_id":"public/2018/04/24/Leetcode-Q10/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538007951044},{"_id":"public/2018/04/23/Leetcode-Q8/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538007951044},{"_id":"public/2018/04/23/Leetcode-Q7/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538007951044},{"_id":"public/2018/04/09/Leetcode-Q32/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538007951044},{"_id":"public/2018/04/08/Leetcode-Q5/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538007951044},{"_id":"public/2018/01/23/Leetcode-Q3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538007951044},{"_id":"public/2018/01/23/leetcode-Q2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538007951045},{"_id":"public/2018/01/23/Leetcode-Q1/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538007951045},{"_id":"public/2018/01/21/Leetcode-Q9/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538007951045},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538007951045},{"_id":"public/archives/2018/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538007951045},{"_id":"public/archives/2018/01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538007951045},{"_id":"public/archives/2018/04/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538007951045},{"_id":"public/categories/Leetcode/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538007951045},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538007951046}],"Category":[{"name":"Leetcode","_id":"cjmju81yh00032i76sw6soagw"}],"Data":[],"Page":[{"title":"404 page not found","date":"2018-01-23T00:10:50.000Z","_content":"\nOoops, the page has gone off the grid\n\n","source":"404/index.md","raw":"---\ntitle: 404 page not found\ndate: 2018-01-23 13:10:50\n---\n\nOoops, the page has gone off the grid\n\n","updated":"2018-09-27T00:03:52.352Z","path":"404/index.html","comments":1,"layout":"page","_id":"cjmju81y800002i76r584g68g","content":"<p>Ooops, the page has gone off the grid</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Ooops, the page has gone off the grid</p>\n"},{"title":"About","date":"2018-01-22T05:33:09.000Z","_content":"\nHi I am a Solution Architect Intern at Amazon Web Services. I love doing coding, I usually have some side projects to work on during spare time. Recently I just finished my own OS project <https://github.com/halfer53/winix>\n\n  - Github: <https://github.com/halfer53>\n  - Linkedin: <https://www.linkedin.com/in/brucetan53/>\n  - Email: <brucetansh@gmail.com>\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2018-01-22 18:33:09\n---\n\nHi I am a Solution Architect Intern at Amazon Web Services. I love doing coding, I usually have some side projects to work on during spare time. Recently I just finished my own OS project <https://github.com/halfer53/winix>\n\n  - Github: <https://github.com/halfer53>\n  - Linkedin: <https://www.linkedin.com/in/brucetan53/>\n  - Email: <brucetansh@gmail.com>\n","updated":"2018-09-27T00:03:52.352Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjmju81z0000m2i76trwaw2cq","content":"<p>Hi I am a Solution Architect Intern at Amazon Web Services. I love doing coding, I usually have some side projects to work on during spare time. Recently I just finished my own OS project <a href=\"https://github.com/halfer53/winix\" target=\"_blank\" rel=\"noopener\">https://github.com/halfer53/winix</a></p>\n<ul>\n<li>Github: <a href=\"https://github.com/halfer53\" target=\"_blank\" rel=\"noopener\">https://github.com/halfer53</a></li>\n<li>Linkedin: <a href=\"https://www.linkedin.com/in/brucetan53/\" target=\"_blank\" rel=\"noopener\">https://www.linkedin.com/in/brucetan53/</a></li>\n<li>Email: <a href=\"mailto:&#x62;&#x72;&#117;&#99;&#x65;&#116;&#97;&#x6e;&#115;&#104;&#x40;&#x67;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#109;\" target=\"_blank\" rel=\"noopener\">&#x62;&#x72;&#117;&#99;&#x65;&#116;&#97;&#x6e;&#115;&#104;&#x40;&#x67;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#109;</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Hi I am a Solution Architect Intern at Amazon Web Services. I love doing coding, I usually have some side projects to work on during spare time. Recently I just finished my own OS project <a href=\"https://github.com/halfer53/winix\" target=\"_blank\" rel=\"noopener\">https://github.com/halfer53/winix</a></p>\n<ul>\n<li>Github: <a href=\"https://github.com/halfer53\" target=\"_blank\" rel=\"noopener\">https://github.com/halfer53</a></li>\n<li>Linkedin: <a href=\"https://www.linkedin.com/in/brucetan53/\" target=\"_blank\" rel=\"noopener\">https://www.linkedin.com/in/brucetan53/</a></li>\n<li>Email: <a href=\"mailto:&#x62;&#x72;&#117;&#99;&#x65;&#116;&#97;&#x6e;&#115;&#104;&#x40;&#x67;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#109;\" target=\"_blank\" rel=\"noopener\">&#x62;&#x72;&#117;&#99;&#x65;&#116;&#97;&#x6e;&#115;&#104;&#x40;&#x67;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#109;</a></li>\n</ul>\n"}],"Post":[{"title":"Leetcode Q1","date":"2018-01-22T11:40:51.000Z","_content":"\n```java\n\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        HashMap<Integer, Integer> map = new HashMap<>();\n        int[] res = new int[2];\n        \n        for(int i=0; i < nums.length; i++){\n            int remaining = target - nums[i];\n            if(map.get(remaining) == null){\n                map.put(nums[i], i);\n            }else{\n                res[0] = map.get(remaining);\n                res[1] = i;\n                return res;\n            }\n        }\n        return res;\n    }\n}\n```\n","source":"_posts/Leetcode-Q1.md","raw":"---\ntitle: Leetcode Q1\ndate: 2018-01-23 00:40:51\ntags:\ncategories:\n- Leetcode\n---\n\n```java\n\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        HashMap<Integer, Integer> map = new HashMap<>();\n        int[] res = new int[2];\n        \n        for(int i=0; i < nums.length; i++){\n            int remaining = target - nums[i];\n            if(map.get(remaining) == null){\n                map.put(nums[i], i);\n            }else{\n                res[0] = map.get(remaining);\n                res[1] = i;\n                return res;\n            }\n        }\n        return res;\n    }\n}\n```\n","slug":"Leetcode-Q1","published":1,"updated":"2018-09-27T00:03:52.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmju81ya00012i76wuh26yxv","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        HashMap&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> remaining = target - nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(map.get(remaining) == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                map.put(nums[i], i);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                res[<span class=\"number\">0</span>] = map.get(remaining);</span><br><span class=\"line\">                res[<span class=\"number\">1</span>] = i;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        HashMap&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> remaining = target - nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(map.get(remaining) == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                map.put(nums[i], i);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                res[<span class=\"number\">0</span>] = map.get(remaining);</span><br><span class=\"line\">                res[<span class=\"number\">1</span>] = i;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Leetcode Q10","date":"2018-04-23T12:41:56.000Z","_content":"\n\nI tried to use non-deterministic state machine first, but the code seems too slow that the Time Limit was reached :(\n\n```java\nclass Solution {\n    Character repchar = null;\n    Character stopchar = null;\n    int maxlen = 0;\n    int i = 0;\n    String p = null;\n    String s = null;\n    int j = 0;\n    \n    void compile(){\n        if(j >= p.length()){\n            repchar = null;\n            return;\n        }\n        repchar = p.charAt(j++);\n        if(j < p.length()){\n            if(p.charAt(j) == '*'){\n                stopchar = j < s.length() -1 ? p.charAt(++j) : null;\n                maxlen = 0;\n            }else{\n                stopchar = p.charAt(j);\n                maxlen = 1;\n            }\n        }else{\n            stopchar = null;\n            maxlen = 1;\n        }\n        \n    }\n    \n    public boolean isMatch(String s, String p) {\n        this.p = p;\n        this.s = s;\n        compile();\n        while( i < s.length()){\n            char c = s.charAt(i);\n            if(repchar == null)\n                return false;\n            \n            if(maxlen == 1 || (stopchar != null && c != stopchar)){\n                if(repchar == '.' || repchar == c){\n                    i++;\n                }else{\n                    return false;\n                }\n            }\n            if((stopchar != null &&c == stopchar) || maxlen == 1)\n                compile();\n            \n        }\n        if(repchar != null)\n            return false;\n        return true;\n    }\n}\n```\n","source":"_posts/Leetcode-Q10.md","raw":"---\ntitle: Leetcode Q10\ncategories:\n  - Leetcode\ndate: 2018-04-24 00:41:56\ntags:\n---\n\n\nI tried to use non-deterministic state machine first, but the code seems too slow that the Time Limit was reached :(\n\n```java\nclass Solution {\n    Character repchar = null;\n    Character stopchar = null;\n    int maxlen = 0;\n    int i = 0;\n    String p = null;\n    String s = null;\n    int j = 0;\n    \n    void compile(){\n        if(j >= p.length()){\n            repchar = null;\n            return;\n        }\n        repchar = p.charAt(j++);\n        if(j < p.length()){\n            if(p.charAt(j) == '*'){\n                stopchar = j < s.length() -1 ? p.charAt(++j) : null;\n                maxlen = 0;\n            }else{\n                stopchar = p.charAt(j);\n                maxlen = 1;\n            }\n        }else{\n            stopchar = null;\n            maxlen = 1;\n        }\n        \n    }\n    \n    public boolean isMatch(String s, String p) {\n        this.p = p;\n        this.s = s;\n        compile();\n        while( i < s.length()){\n            char c = s.charAt(i);\n            if(repchar == null)\n                return false;\n            \n            if(maxlen == 1 || (stopchar != null && c != stopchar)){\n                if(repchar == '.' || repchar == c){\n                    i++;\n                }else{\n                    return false;\n                }\n            }\n            if((stopchar != null &&c == stopchar) || maxlen == 1)\n                compile();\n            \n        }\n        if(repchar != null)\n            return false;\n        return true;\n    }\n}\n```\n","slug":"Leetcode-Q10","published":1,"updated":"2018-09-27T00:03:52.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmju81ye00022i76wh9wn5t8","content":"<p>I tried to use non-deterministic state machine first, but the code seems too slow that the Time Limit was reached :(</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    Character repchar = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Character stopchar = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxlen = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    String p = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    String s = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">compile</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j &gt;= p.length())&#123;</span><br><span class=\"line\">            repchar = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        repchar = p.charAt(j++);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j &lt; p.length())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p.charAt(j) == <span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">                stopchar = j &lt; s.length() -<span class=\"number\">1</span> ? p.charAt(++j) : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                maxlen = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                stopchar = p.charAt(j);</span><br><span class=\"line\">                maxlen = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            stopchar = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            maxlen = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMatch</span><span class=\"params\">(String s, String p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.p = p;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.s = s;</span><br><span class=\"line\">        compile();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( i &lt; s.length())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> c = s.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(repchar == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(maxlen == <span class=\"number\">1</span> || (stopchar != <span class=\"keyword\">null</span> &amp;&amp; c != stopchar))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(repchar == <span class=\"string\">'.'</span> || repchar == c)&#123;</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((stopchar != <span class=\"keyword\">null</span> &amp;&amp;c == stopchar) || maxlen == <span class=\"number\">1</span>)</span><br><span class=\"line\">                compile();</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(repchar != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>I tried to use non-deterministic state machine first, but the code seems too slow that the Time Limit was reached :(</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    Character repchar = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Character stopchar = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxlen = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    String p = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    String s = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">compile</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j &gt;= p.length())&#123;</span><br><span class=\"line\">            repchar = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        repchar = p.charAt(j++);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j &lt; p.length())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p.charAt(j) == <span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">                stopchar = j &lt; s.length() -<span class=\"number\">1</span> ? p.charAt(++j) : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                maxlen = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                stopchar = p.charAt(j);</span><br><span class=\"line\">                maxlen = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            stopchar = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            maxlen = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMatch</span><span class=\"params\">(String s, String p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.p = p;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.s = s;</span><br><span class=\"line\">        compile();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( i &lt; s.length())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> c = s.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(repchar == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(maxlen == <span class=\"number\">1</span> || (stopchar != <span class=\"keyword\">null</span> &amp;&amp; c != stopchar))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(repchar == <span class=\"string\">'.'</span> || repchar == c)&#123;</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((stopchar != <span class=\"keyword\">null</span> &amp;&amp;c == stopchar) || maxlen == <span class=\"number\">1</span>)</span><br><span class=\"line\">                compile();</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(repchar != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Leetcode Q3","date":"2018-01-23T01:31:54.000Z","_content":"\nThere are basically two options here\n\n1. O(n^3), loop through every possibility to find the longest substring\n2. Use a hashmap to indicate the position of each character. If a replicate character is encountered, and is contained in the current substring, current substring will be updated such that it will start from one character next to the previous one, curr count will be updated accordingly.\n\n```java\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n        HashMap<Character, Integer> map = new HashMap<>();\n        int longest = 0;\n        int curr = 0;\n        int prev = 0;\n        for(int i=0; i < s.length(); i++){\n            char c = s.charAt(i);\n            if(map.get(c) != null && map.get(c) >= prev){\n                prev = map.get(c);\n                map.put(c, i);\n                longest = Math.max(curr, longest);\n                curr = i - prev;\n                prev++;\n            }else{\n                map.put(c, i);\n                curr++;\n            }\n        }\n        longest = Math.max(curr, longest);\n        return longest;\n    }\n}\n```\n","source":"_posts/Leetcode-Q3.md","raw":"---\ntitle: Leetcode Q3\ncategories:\n  - Leetcode\ndate: 2018-01-23 14:31:54\ntags:\n---\n\nThere are basically two options here\n\n1. O(n^3), loop through every possibility to find the longest substring\n2. Use a hashmap to indicate the position of each character. If a replicate character is encountered, and is contained in the current substring, current substring will be updated such that it will start from one character next to the previous one, curr count will be updated accordingly.\n\n```java\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n        HashMap<Character, Integer> map = new HashMap<>();\n        int longest = 0;\n        int curr = 0;\n        int prev = 0;\n        for(int i=0; i < s.length(); i++){\n            char c = s.charAt(i);\n            if(map.get(c) != null && map.get(c) >= prev){\n                prev = map.get(c);\n                map.put(c, i);\n                longest = Math.max(curr, longest);\n                curr = i - prev;\n                prev++;\n            }else{\n                map.put(c, i);\n                curr++;\n            }\n        }\n        longest = Math.max(curr, longest);\n        return longest;\n    }\n}\n```\n","slug":"Leetcode-Q3","published":1,"updated":"2018-09-27T00:03:52.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmju81yj00042i76c3numrpx","content":"<p>There are basically two options here</p>\n<ol>\n<li>O(n^3), loop through every possibility to find the longest substring</li>\n<li>Use a hashmap to indicate the position of each character. If a replicate character is encountered, and is contained in the current substring, current substring will be updated such that it will start from one character next to the previous one, curr count will be updated accordingly.</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        HashMap&lt;Character, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> longest = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> curr = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> prev = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> c = s.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(map.get(c) != <span class=\"keyword\">null</span> &amp;&amp; map.get(c) &gt;= prev)&#123;</span><br><span class=\"line\">                prev = map.get(c);</span><br><span class=\"line\">                map.put(c, i);</span><br><span class=\"line\">                longest = Math.max(curr, longest);</span><br><span class=\"line\">                curr = i - prev;</span><br><span class=\"line\">                prev++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                map.put(c, i);</span><br><span class=\"line\">                curr++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        longest = Math.max(curr, longest);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> longest;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>There are basically two options here</p>\n<ol>\n<li>O(n^3), loop through every possibility to find the longest substring</li>\n<li>Use a hashmap to indicate the position of each character. If a replicate character is encountered, and is contained in the current substring, current substring will be updated such that it will start from one character next to the previous one, curr count will be updated accordingly.</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        HashMap&lt;Character, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> longest = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> curr = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> prev = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> c = s.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(map.get(c) != <span class=\"keyword\">null</span> &amp;&amp; map.get(c) &gt;= prev)&#123;</span><br><span class=\"line\">                prev = map.get(c);</span><br><span class=\"line\">                map.put(c, i);</span><br><span class=\"line\">                longest = Math.max(curr, longest);</span><br><span class=\"line\">                curr = i - prev;</span><br><span class=\"line\">                prev++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                map.put(c, i);</span><br><span class=\"line\">                curr++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        longest = Math.max(curr, longest);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> longest;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Leetcode Q32","date":"2018-04-09T08:04:25.000Z","_content":"\nFirst attempt was a naive solution with Time Complexity O(n^2)\n\n```java\nclass Solution {\n    public int longestValidParentheses(String s) {\n        boolean[][] dp = new boolean[s.length()][s.length()];\n        int[] ends = new int[s.length()+1];\n        int longest = 0;\n        for(int i=s.length() - 1; i >= 0; i--){\n            for(int j = i; j < s.length(); j++){\n                if(s.charAt(i) == '(' && s.charAt(j) == ')'\n                  && (j - i == 1 || dp[i + 1][j - 1])){\n                        dp[i][j] = true;\n                        ends[i] = j;\n                        int nexthop = j + 1;\n                        while(ends[nexthop] != 0){\n                            ends[i] = ends[nexthop];\n                            int end = ends[i];\n                            nexthop = end + 1;\n                            dp[i][end] = true;\n                        }\n                        longest = Math.max(longest, ends[i] - i + 1);\n                        // System.out.println(i + \" \" + j + \" \" + longest);\n                  }\n            }\n        }\n        return longest;\n    }\n}\n```","source":"_posts/Leetcode-Q32.md","raw":"---\ntitle: Leetcode Q32\ncategories:\n  - Leetcode\ndate: 2018-04-09 20:04:25\ntags:\n---\n\nFirst attempt was a naive solution with Time Complexity O(n^2)\n\n```java\nclass Solution {\n    public int longestValidParentheses(String s) {\n        boolean[][] dp = new boolean[s.length()][s.length()];\n        int[] ends = new int[s.length()+1];\n        int longest = 0;\n        for(int i=s.length() - 1; i >= 0; i--){\n            for(int j = i; j < s.length(); j++){\n                if(s.charAt(i) == '(' && s.charAt(j) == ')'\n                  && (j - i == 1 || dp[i + 1][j - 1])){\n                        dp[i][j] = true;\n                        ends[i] = j;\n                        int nexthop = j + 1;\n                        while(ends[nexthop] != 0){\n                            ends[i] = ends[nexthop];\n                            int end = ends[i];\n                            nexthop = end + 1;\n                            dp[i][end] = true;\n                        }\n                        longest = Math.max(longest, ends[i] - i + 1);\n                        // System.out.println(i + \" \" + j + \" \" + longest);\n                  }\n            }\n        }\n        return longest;\n    }\n}\n```","slug":"Leetcode-Q32","published":1,"updated":"2018-09-27T00:03:52.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmju81yl00052i76hhbxjs2o","content":"<p>First attempt was a naive solution with Time Complexity O(n^2)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestValidParentheses</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[s.length()][s.length()];</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] ends = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[s.length()+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> longest = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=s.length() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt; s.length(); j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(s.charAt(i) == <span class=\"string\">'('</span> &amp;&amp; s.charAt(j) == <span class=\"string\">')'</span></span><br><span class=\"line\">                  &amp;&amp; (j - i == <span class=\"number\">1</span> || dp[i + <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]))&#123;</span><br><span class=\"line\">                        dp[i][j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        ends[i] = j;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> nexthop = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">while</span>(ends[nexthop] != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                            ends[i] = ends[nexthop];</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> end = ends[i];</span><br><span class=\"line\">                            nexthop = end + <span class=\"number\">1</span>;</span><br><span class=\"line\">                            dp[i][end] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        longest = Math.max(longest, ends[i] - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// System.out.println(i + \" \" + j + \" \" + longest);</span></span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> longest;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>First attempt was a naive solution with Time Complexity O(n^2)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestValidParentheses</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[s.length()][s.length()];</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] ends = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[s.length()+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> longest = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=s.length() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt; s.length(); j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(s.charAt(i) == <span class=\"string\">'('</span> &amp;&amp; s.charAt(j) == <span class=\"string\">')'</span></span><br><span class=\"line\">                  &amp;&amp; (j - i == <span class=\"number\">1</span> || dp[i + <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]))&#123;</span><br><span class=\"line\">                        dp[i][j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        ends[i] = j;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> nexthop = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">while</span>(ends[nexthop] != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                            ends[i] = ends[nexthop];</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> end = ends[i];</span><br><span class=\"line\">                            nexthop = end + <span class=\"number\">1</span>;</span><br><span class=\"line\">                            dp[i][end] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        longest = Math.max(longest, ends[i] - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// System.out.println(i + \" \" + j + \" \" + longest);</span></span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> longest;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Leetcode Q5","date":"2018-04-08T11:16:58.000Z","_content":"\n```java\nclass Solution {\n    public String longestPalindrome(String s) {\n        if(s.length() <= 2)\n            return s;\n        int lo = 0, len = 0;\n        boolean[][] dp = new boolean[s.length()][s.length()];\n        for(int i= s.length() - 2; i >= 0; i--){\n            for(int j=i+1; j < s.length(); j++){\n                if(s.charAt(i) == s.charAt(j) &&\n                  (j - i < 3 || dp[i + 1][j - 1])){\n                    dp[i][j] = true;\n                    int tlen = j - i;\n                    if(tlen > len){\n                        len = tlen;\n                        lo = i;\n                    }\n                }\n            }\n        }\n        return s.substring(lo,lo + len + 1);\n    }\n}\n```\n","source":"_posts/Leetcode-Q5.md","raw":"---\ntitle: Leetcode Q5\ncategories:\n  - Leetcode\ndate: 2018-04-08 23:16:58\ntags:\n---\n\n```java\nclass Solution {\n    public String longestPalindrome(String s) {\n        if(s.length() <= 2)\n            return s;\n        int lo = 0, len = 0;\n        boolean[][] dp = new boolean[s.length()][s.length()];\n        for(int i= s.length() - 2; i >= 0; i--){\n            for(int j=i+1; j < s.length(); j++){\n                if(s.charAt(i) == s.charAt(j) &&\n                  (j - i < 3 || dp[i + 1][j - 1])){\n                    dp[i][j] = true;\n                    int tlen = j - i;\n                    if(tlen > len){\n                        len = tlen;\n                        lo = i;\n                    }\n                }\n            }\n        }\n        return s.substring(lo,lo + len + 1);\n    }\n}\n```\n","slug":"Leetcode-Q5","published":1,"updated":"2018-09-27T00:03:52.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmju81yn00062i76xk2y5jnk","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">longestPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.length() &lt;= <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lo = <span class=\"number\">0</span>, len = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[s.length()][s.length()];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i= s.length() - <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>; j &lt; s.length(); j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(s.charAt(i) == s.charAt(j) &amp;&amp;</span><br><span class=\"line\">                  (j - i &lt; <span class=\"number\">3</span> || dp[i + <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]))&#123;</span><br><span class=\"line\">                    dp[i][j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> tlen = j - i;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(tlen &gt; len)&#123;</span><br><span class=\"line\">                        len = tlen;</span><br><span class=\"line\">                        lo = i;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.substring(lo,lo + len + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">longestPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.length() &lt;= <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lo = <span class=\"number\">0</span>, len = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[s.length()][s.length()];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i= s.length() - <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>; j &lt; s.length(); j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(s.charAt(i) == s.charAt(j) &amp;&amp;</span><br><span class=\"line\">                  (j - i &lt; <span class=\"number\">3</span> || dp[i + <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]))&#123;</span><br><span class=\"line\">                    dp[i][j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> tlen = j - i;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(tlen &gt; len)&#123;</span><br><span class=\"line\">                        len = tlen;</span><br><span class=\"line\">                        lo = i;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.substring(lo,lo + len + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Leetcode Q7","date":"2018-04-23T09:11:25.000Z","_content":"\n```java\npublic class Solution {\n    public int reverse(int x) {\n        long i = 0;\n        int l = String.valueOf(Math.abs(x)).length();\n        int count = 1;\n        for(;l>1;l--){\n            count *= 10;  \n        }\n        \n        while(x!=0){\n            i += ((long)x%10) * (long)count;\n            count /= 10;\n            x /= 10;\n        }\n        if(i>Integer.MAX_VALUE || i<Integer.MIN_VALUE){\n            return 0;\n        }\n        if(x<0) i*= -1;\n        return (int)i;\n    }\n}\n```","source":"_posts/Leetcode-Q7.md","raw":"---\ntitle: Leetcode Q7\ncategories:\n  - Leetcode\ndate: 2018-04-23 21:11:25\ntags:\n---\n\n```java\npublic class Solution {\n    public int reverse(int x) {\n        long i = 0;\n        int l = String.valueOf(Math.abs(x)).length();\n        int count = 1;\n        for(;l>1;l--){\n            count *= 10;  \n        }\n        \n        while(x!=0){\n            i += ((long)x%10) * (long)count;\n            count /= 10;\n            x /= 10;\n        }\n        if(i>Integer.MAX_VALUE || i<Integer.MIN_VALUE){\n            return 0;\n        }\n        if(x<0) i*= -1;\n        return (int)i;\n    }\n}\n```","slug":"Leetcode-Q7","published":1,"updated":"2018-09-27T00:03:52.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmju81yq00082i76z7cdo6cz","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = String.valueOf(Math.abs(x)).length();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;l&gt;<span class=\"number\">1</span>;l--)&#123;</span><br><span class=\"line\">            count *= <span class=\"number\">10</span>;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            i += ((<span class=\"keyword\">long</span>)x%<span class=\"number\">10</span>) * (<span class=\"keyword\">long</span>)count;</span><br><span class=\"line\">            count /= <span class=\"number\">10</span>;</span><br><span class=\"line\">            x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;Integer.MAX_VALUE || i&lt;Integer.MIN_VALUE)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>) i*= -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = String.valueOf(Math.abs(x)).length();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;l&gt;<span class=\"number\">1</span>;l--)&#123;</span><br><span class=\"line\">            count *= <span class=\"number\">10</span>;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            i += ((<span class=\"keyword\">long</span>)x%<span class=\"number\">10</span>) * (<span class=\"keyword\">long</span>)count;</span><br><span class=\"line\">            count /= <span class=\"number\">10</span>;</span><br><span class=\"line\">            x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;Integer.MAX_VALUE || i&lt;Integer.MIN_VALUE)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>) i*= -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Leetcode Q8","date":"2018-04-23T09:46:33.000Z","_content":"\n```c\nstatic inline bool is_char(char c){\n    return '0' <= c && c <= '9';\n}\n\nint myAtoi(char* str) {\n    long ret = 0;\n    int sign = 1;\n    if(!str)\n        return ret;\n    while(*str == ' ')\n        str++;\n    if(*str && *str == '-'){\n        sign = -1;\n        str++;\n    }else if(*str && *str == '+')\n        str++;\n    \n    while(*str && is_char(*str)){\n        ret = ret * 10 + (*str - '0');\n        if(ret * sign < (1 << 31))\n            return 1 << 31;\n        if(ret * sign > ~(1 << 31))\n            return ~(1 << 31);\n\n        str++;\n    }\n    return ret * sign;\n}\n```","source":"_posts/Leetcode-Q8.md","raw":"---\ntitle: Leetcode Q8\ncategories:\n  - Leetcode\ndate: 2018-04-23 21:46:33\ntags:\n---\n\n```c\nstatic inline bool is_char(char c){\n    return '0' <= c && c <= '9';\n}\n\nint myAtoi(char* str) {\n    long ret = 0;\n    int sign = 1;\n    if(!str)\n        return ret;\n    while(*str == ' ')\n        str++;\n    if(*str && *str == '-'){\n        sign = -1;\n        str++;\n    }else if(*str && *str == '+')\n        str++;\n    \n    while(*str && is_char(*str)){\n        ret = ret * 10 + (*str - '0');\n        if(ret * sign < (1 << 31))\n            return 1 << 31;\n        if(ret * sign > ~(1 << 31))\n            return ~(1 << 31);\n\n        str++;\n    }\n    return ret * sign;\n}\n```","slug":"Leetcode-Q8","published":1,"updated":"2018-09-27T00:03:52.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmju81yr00092i76a6765r37","content":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">is_char</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'0'</span> &lt;= c &amp;&amp; c &lt;= <span class=\"string\">'9'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">myAtoi</span><span class=\"params\">(<span class=\"keyword\">char</span>* str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sign = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!str)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*str == <span class=\"string\">' '</span>)</span><br><span class=\"line\">        str++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(*str &amp;&amp; *str == <span class=\"string\">'-'</span>)&#123;</span><br><span class=\"line\">        sign = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        str++;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(*str &amp;&amp; *str == <span class=\"string\">'+'</span>)</span><br><span class=\"line\">        str++;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*str &amp;&amp; is_char(*str))&#123;</span><br><span class=\"line\">        ret = ret * <span class=\"number\">10</span> + (*str - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ret * sign &lt; (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">31</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">31</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ret * sign &gt; ~(<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">31</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ~(<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">31</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        str++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret * sign;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">is_char</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'0'</span> &lt;= c &amp;&amp; c &lt;= <span class=\"string\">'9'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">myAtoi</span><span class=\"params\">(<span class=\"keyword\">char</span>* str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sign = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!str)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*str == <span class=\"string\">' '</span>)</span><br><span class=\"line\">        str++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(*str &amp;&amp; *str == <span class=\"string\">'-'</span>)&#123;</span><br><span class=\"line\">        sign = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        str++;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(*str &amp;&amp; *str == <span class=\"string\">'+'</span>)</span><br><span class=\"line\">        str++;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*str &amp;&amp; is_char(*str))&#123;</span><br><span class=\"line\">        ret = ret * <span class=\"number\">10</span> + (*str - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ret * sign &lt; (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">31</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">31</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ret * sign &gt; ~(<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">31</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ~(<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">31</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        str++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret * sign;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Leetcode Q9","date":"2018-01-20T14:58:33.000Z","_content":"\n<https://leetcode.com/problems/palindrome-number/description/>\n\n```java\nclass Solution {\n    public boolean isPalindrome(int x) {\n        if(x == 0)\n            return true;\n        if(x < 0)\n            return false;\n        long rev = 0;\n        int val = x;\n        int count = 0;\n        while( val!= 0){\n            rev = rev * 10 + val % 10;\n            val /= 10;\n            count++;\n            if( rev > Integer.MAX_VALUE || rev < Integer.MIN_VALUE)\n                return false;\n        }\n        int irev = (int)rev;\n        while(x != irev){\n            int shift = count * 10;\n            int left = irev / shift;\n            int right = x % 10;\n            if( left != right)\n                return false;\n            x/= 10;\n            irev /= shift;\n            count--;\n        }\n        return true;\n    }\n}\n```\n","source":"_posts/Leetcode-Q9.md","raw":"---\ntitle: Leetcode Q9\ndate: 2018-01-21 03:58:33\ncategories:\n- Leetcode\ntags:\n---\n\n<https://leetcode.com/problems/palindrome-number/description/>\n\n```java\nclass Solution {\n    public boolean isPalindrome(int x) {\n        if(x == 0)\n            return true;\n        if(x < 0)\n            return false;\n        long rev = 0;\n        int val = x;\n        int count = 0;\n        while( val!= 0){\n            rev = rev * 10 + val % 10;\n            val /= 10;\n            count++;\n            if( rev > Integer.MAX_VALUE || rev < Integer.MIN_VALUE)\n                return false;\n        }\n        int irev = (int)rev;\n        while(x != irev){\n            int shift = count * 10;\n            int left = irev / shift;\n            int right = x % 10;\n            if( left != right)\n                return false;\n            x/= 10;\n            irev /= shift;\n            count--;\n        }\n        return true;\n    }\n}\n```\n","slug":"Leetcode-Q9","published":1,"updated":"2018-09-27T00:03:52.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmju81yt000c2i76n0ttfwsj","content":"<p><a href=\"https://leetcode.com/problems/palindrome-number/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/palindrome-number/description/</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> rev = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> val = x;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( val!= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            rev = rev * <span class=\"number\">10</span> + val % <span class=\"number\">10</span>;</span><br><span class=\"line\">            val /= <span class=\"number\">10</span>;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( rev &gt; Integer.MAX_VALUE || rev &lt; Integer.MIN_VALUE)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> irev = (<span class=\"keyword\">int</span>)rev;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x != irev)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> shift = count * <span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> left = irev / shift;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> right = x % <span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( left != right)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            x/= <span class=\"number\">10</span>;</span><br><span class=\"line\">            irev /= shift;</span><br><span class=\"line\">            count--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.com/problems/palindrome-number/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/palindrome-number/description/</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> rev = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> val = x;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( val!= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            rev = rev * <span class=\"number\">10</span> + val % <span class=\"number\">10</span>;</span><br><span class=\"line\">            val /= <span class=\"number\">10</span>;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( rev &gt; Integer.MAX_VALUE || rev &lt; Integer.MIN_VALUE)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> irev = (<span class=\"keyword\">int</span>)rev;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x != irev)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> shift = count * <span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> left = irev / shift;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> right = x % <span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( left != right)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            x/= <span class=\"number\">10</span>;</span><br><span class=\"line\">            irev /= shift;</span><br><span class=\"line\">            count--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"leetcode Q2","date":"2018-01-22T11:58:28.000Z","_content":"\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode dummy = new ListNode(0);\n        ListNode curr = dummy;\n        int carry = 0;\n        \n        while( l1 != null || l2 != null){\n            int l1i = l1 != null ? l1.val : 0;\n            int l2i = l2 != null ? l2.val : 0;\n            int combine = (l1i + l2i) + carry;\n            int newval = combine % 10;\n            carry = combine / 10;\n            \n            ListNode tmp = new ListNode(newval);\n            \n            curr.next = tmp;\n            curr = tmp;\n            if(l1 != null)\n                l1 = l1.next;\n            if(l2 != null)\n                l2 = l2.next;\n        }\n        \n        if(carry != 0){\n            curr.next = new ListNode(carry);\n        }\n            \n        return dummy.next;\n    }\n}\n```","source":"_posts/leetcode-Q2.md","raw":"---\ntitle: leetcode Q2\ncategories:\n  - Leetcode\ndate: 2018-01-23 00:58:28\ntags:\n---\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode dummy = new ListNode(0);\n        ListNode curr = dummy;\n        int carry = 0;\n        \n        while( l1 != null || l2 != null){\n            int l1i = l1 != null ? l1.val : 0;\n            int l2i = l2 != null ? l2.val : 0;\n            int combine = (l1i + l2i) + carry;\n            int newval = combine % 10;\n            carry = combine / 10;\n            \n            ListNode tmp = new ListNode(newval);\n            \n            curr.next = tmp;\n            curr = tmp;\n            if(l1 != null)\n                l1 = l1.next;\n            if(l2 != null)\n                l2 = l2.next;\n        }\n        \n        if(carry != 0){\n            curr.next = new ListNode(carry);\n        }\n            \n        return dummy.next;\n    }\n}\n```","slug":"leetcode-Q2","published":1,"updated":"2018-09-27T00:03:52.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmju81yv000e2i76nflvl2n2","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">addTwoNumbers</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">        ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode curr = dummy;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>( l1 != <span class=\"keyword\">null</span> || l2 != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> l1i = l1 != <span class=\"keyword\">null</span> ? l1.val : <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> l2i = l2 != <span class=\"keyword\">null</span> ? l2.val : <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> combine = (l1i + l2i) + carry;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> newval = combine % <span class=\"number\">10</span>;</span><br><span class=\"line\">            carry = combine / <span class=\"number\">10</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            ListNode tmp = <span class=\"keyword\">new</span> ListNode(newval);</span><br><span class=\"line\">            </span><br><span class=\"line\">            curr.next = tmp;</span><br><span class=\"line\">            curr = tmp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l1 != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                l1 = l1.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l2 != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                l2 = l2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(carry != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            curr.next = <span class=\"keyword\">new</span> ListNode(carry);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">addTwoNumbers</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">        ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode curr = dummy;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>( l1 != <span class=\"keyword\">null</span> || l2 != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> l1i = l1 != <span class=\"keyword\">null</span> ? l1.val : <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> l2i = l2 != <span class=\"keyword\">null</span> ? l2.val : <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> combine = (l1i + l2i) + carry;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> newval = combine % <span class=\"number\">10</span>;</span><br><span class=\"line\">            carry = combine / <span class=\"number\">10</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            ListNode tmp = <span class=\"keyword\">new</span> ListNode(newval);</span><br><span class=\"line\">            </span><br><span class=\"line\">            curr.next = tmp;</span><br><span class=\"line\">            curr = tmp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l1 != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                l1 = l1.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l2 != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                l2 = l2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(carry != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            curr.next = <span class=\"keyword\">new</span> ListNode(carry);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjmju81yl00052i76hhbxjs2o","category_id":"cjmju81yh00032i76sw6soagw","_id":"cjmju81ys000a2i76lgi4ljp7"},{"post_id":"cjmju81ya00012i76wuh26yxv","category_id":"cjmju81yh00032i76sw6soagw","_id":"cjmju81yu000d2i76g2zlea6y"},{"post_id":"cjmju81yn00062i76xk2y5jnk","category_id":"cjmju81yh00032i76sw6soagw","_id":"cjmju81yx000f2i76kqt17zyk"},{"post_id":"cjmju81yq00082i76z7cdo6cz","category_id":"cjmju81yh00032i76sw6soagw","_id":"cjmju81yx000g2i76i9g2f02d"},{"post_id":"cjmju81ye00022i76wh9wn5t8","category_id":"cjmju81yh00032i76sw6soagw","_id":"cjmju81yy000h2i762nia0fw3"},{"post_id":"cjmju81yr00092i76a6765r37","category_id":"cjmju81yh00032i76sw6soagw","_id":"cjmju81yy000i2i76vgpk01c9"},{"post_id":"cjmju81yt000c2i76n0ttfwsj","category_id":"cjmju81yh00032i76sw6soagw","_id":"cjmju81yy000j2i76xqzxr19e"},{"post_id":"cjmju81yj00042i76c3numrpx","category_id":"cjmju81yh00032i76sw6soagw","_id":"cjmju81yy000k2i768665optu"},{"post_id":"cjmju81yv000e2i76nflvl2n2","category_id":"cjmju81yh00032i76sw6soagw","_id":"cjmju81yy000l2i76xgw5zzb8"}],"PostTag":[],"Tag":[]}}